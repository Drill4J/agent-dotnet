#pragma once

#include "Connector.h"

// A hack to solve GNU-specific artifact generated by Kotlin native 1.3.70
#define __attribute__(x) 
#include <agent_connector_api.h>
#undef  __attribute__

#include <typeinfo>
#include <stdexcept>
#include <iostream>
#include <filesystem>
#include <queue>
#include <mutex>
#include <concepts>
#include "../Drill4dotNet/OutputUtils.h"
#include <nlohmann/json.hpp>

EXTERN_C IMAGE_DOS_HEADER __ImageBase;

namespace Drill4dotNet
{
    class DllLoader
    {
    private:
        class Deleter
        {
        private:
            const std::filesystem::path m_fileName;

        public:
            Deleter(const std::filesystem::path& fileName)
                : m_fileName(fileName)
            {
            }

            void operator()(const HMODULE library) const noexcept
            {
                if (library == nullptr)
                {
                    return;
                }

                if (::FreeLibrary(library) == FALSE)
                {
                    std::wcout
                        << L"Failed to unload library "
                        << m_fileName.wstring()
                        << std::endl;
                }
            }
        };

        using UniquePtr = std::unique_ptr<std::remove_pointer_t<HMODULE>, Deleter>;

        static UniquePtr Create(const std::filesystem::path& fileName)
        {
            Deleter deleter { fileName };

            const HMODULE nakedPointer { ::LoadLibraryW(fileName.wstring().c_str()) };
            if (nakedPointer == nullptr)
            {
                throw std::runtime_error(
                    std::string { "Cannot load " } + fileName.string());
            }

            return UniquePtr(nakedPointer, std::move(deleter));
        }

        UniquePtr m_handle;

        static const std::filesystem::path ResolveAbsolutePath(const std::filesystem::path& name)
        {
            const HMODULE hCurrentModule = reinterpret_cast<HMODULE>(&__ImageBase);
            DWORD rSize = _MAX_PATH;
            std::wstring currentModuleFileName(_MAX_PATH, L'\0');
            do
            {
                currentModuleFileName.resize(rSize, L'\0');
                rSize = ::GetModuleFileName(hCurrentModule, currentModuleFileName.data(), static_cast<unsigned long>(currentModuleFileName.size()));
                rSize *= 2;
            } while (::GetLastError() == ERROR_INSUFFICIENT_BUFFER);
            TrimTrailingNulls(currentModuleFileName);

            const std::filesystem::path absolutePath = std::filesystem::path(currentModuleFileName).parent_path() / name;
            std::wcout
                << "ResolveAbsolutePath: "
                << absolutePath.wstring()
                << std::endl;
            return absolutePath;
        }

    public:
        explicit DllLoader(const std::filesystem::path& fileName)
            : m_handle{ Create(ResolveAbsolutePath(fileName)) }
        {
        }

        HMODULE Handle() const noexcept
        {
            return m_handle.get();
        }
    };

    class AgentConnectorDllLoader
        : public DllLoader
    {
    private:
        inline static const std::filesystem::path CONNECTOR_DLL_FILE{ L"agent_connector.dll" };

        template <typename T>
        T ImportFunction(LPCSTR const name)
        {
            void* result = ::GetProcAddress(Handle(), name);
            if (result == nullptr)
            {
                throw std::runtime_error(
                    std::string("Cannot get address of procedure: ")
                    + name
                    + " in "
                    + CONNECTOR_DLL_FILE.string());
            }

            return reinterpret_cast<T>(result);
        }
    public:
        decltype(::agent_connector_symbols)* const agent_connector_symbols;
        decltype(::initialize_agent)* const initialize_agent;
        decltype(::sendMessage)* const sendMessage;
        decltype(::sendPluginMessage)* const sendPluginMessage;

        AgentConnectorDllLoader()
            : DllLoader{ CONNECTOR_DLL_FILE },
            agent_connector_symbols { ImportFunction<decltype(agent_connector_symbols)>("agent_connector_symbols") },
            initialize_agent { ImportFunction<decltype(initialize_agent)>("initialize_agent") },
            sendMessage { ImportFunction<decltype(sendMessage)>("sendMessage") },
            sendPluginMessage{ ImportFunction<decltype(sendPluginMessage)>("sendPluginMessage") }
        {
        }
    };

    class Event
    {
    private:
        class Deleter
        {
        public:
            void operator()(const HANDLE event) const noexcept
            {
                if (event != nullptr)
                {
                    if (::CloseHandle(event) == FALSE)
                    {
                        std::wcout
                            << L"Failed to close event handle."
                            << std::endl;
                    }
                }
            }
        };

        using UniquePtr = std::unique_ptr<std::remove_pointer_t<HANDLE>, Deleter>;
        UniquePtr m_handle;

    public:
        Event(
            LPSECURITY_ATTRIBUTES securityAttributes,
            BOOL manualReset,
            BOOL initialState,
            LPCWSTR const name)
            : m_handle { ::CreateEventW(
                    securityAttributes,
                    manualReset,
                    initialState,
                    name) }
        {
            if (m_handle.get() == nullptr)
            {
                throw std::runtime_error("Cannot create an event in Connector");
            }
        }

        HANDLE Handle() const noexcept
        {
            return m_handle.get();
        }
    };

    // Converts a UTF-8 string to a std::wstring.
    // Throws std::runtime_error in case of an error.
    static std::wstring DecodeUtf8(const std::string& string)
    {
        if (string == "")
        {
            return std::wstring{};
        }

        std::wstring result(
            MultiByteToWideChar(
                CP_UTF8,
                MB_ERR_INVALID_CHARS,
                string.c_str(),
                string.size(),
                nullptr,
                0),
            L'\0');

        if (MultiByteToWideChar(
            CP_UTF8,
            MB_ERR_INVALID_CHARS,
            string.c_str(),
            string.size(),
            result.data(),
            result.size()) == 0)
        {
            throw std::runtime_error("Could no decode UTF-8: Invalid UTF-8 string.");
        }

        return result;
    }

    // Converts the given string to UTF-8.
    // Throws std::runtime_error in case of an error.
    static std::string EncodeUtf8(const std::wstring& source)
    {
        if (source == L"")
        {
            return {};
        }


        std::string result(
            WideCharToMultiByte(
                CP_UTF8,
                WC_ERR_INVALID_CHARS,
                source.c_str(),
                source.size(),
                nullptr,
                0,
                nullptr,
                nullptr),
            '\0');

        if (WideCharToMultiByte(
            CP_UTF8,
            WC_ERR_INVALID_CHARS,
            source.c_str(),
            source.size(),
            result.data(),
            result.size(),
            nullptr,
            nullptr) == 0)
        {
            throw std::runtime_error("Could no encode UTF-8: Invalid UTF-16 string.");
        }

        return result;
    }

    // Converts an AstMethod object to json format.
    static void to_json(nlohmann::json& target, const AstMethod& data)
    {
        std::vector<std::string> params{};
        params.reserve(data.params.size());
        for (const auto& param : data.params)
        {
            params.push_back(EncodeUtf8(param));
        }

        target = nlohmann::json{
            { "name", EncodeUtf8(data.name) },
            { "params", params },
            { "returnType", EncodeUtf8(data.returnType) },
            { "count", data.count },
            { "probes", data.probes }
        };
    }

    // Gets an AstMethod object from json.
    static void from_json(const nlohmann::json& source, AstMethod& target)
    {
        std::string string;
        source.at("name").get_to(string);
        target.name = DecodeUtf8(string);

        std::vector<std::string> params{};
        source.at("params").get_to(params);
        target.params.clear();
        target.params.reserve(params.size());
        for (const auto& param : params)
        {
            target.params.push_back(DecodeUtf8(param));
        }

        source.at("returnType").get_to(string);
        target.returnType = DecodeUtf8(string);

        source.at("count").get_to(target.count);
        source.at("probes").get_to(target.probes);
    }

    // Converts an AstEntity object to json format.
    static void to_json(nlohmann::json& target, const AstEntity& data)
    {
        target = nlohmann::json{
            { "path", EncodeUtf8(data.path) },
            { "name", EncodeUtf8(data.name) },
            { "methods", data.methods }
        };
    }

    // Gets an AstEntity object from json.
    static void from_json(const nlohmann::json& source, AstEntity& target)
    {
        std::string string;
        source.at("path").get_to(string);
        target.path = DecodeUtf8(string);

        source.at("name").get_to(string);
        target.name = DecodeUtf8(string);

        source.at("methods").get_to(target.methods);
    }

    // Sent to Drill admin to notify that classes data will be sent.
    class InitInfo
    {
    public:
        std::string type { "INIT" };
        uint32_t classesCount;
        std::string message { "" };
        bool init { true };

        InitInfo(uint32_t classesCount)
            : classesCount { classesCount }
        {
        }
    };

    // Converts an InitInfo object to json format.
    static void to_json(nlohmann::json& target, const InitInfo& data)
    {
        target = nlohmann::json{
            { "type", data.type },
            { "classesCount", data.classesCount },
            { "message", data.message },
            { "init", data.init }
        };
    }

    // Gets an InitInfo object from json.
    static void from_json(const nlohmann::json& source, InitInfo& target)
    {
        source.at("type").get_to(target.type);
        source.at("classesCount").get_to(target.classesCount);
        source.at("message").get_to(target.message);
        source.at("init").get_to(target.init);
    }

    // Sent to Drill admin to provide information about classes.
    class InitDataPart
    {
    public:
        std::string type { "INIT_DATA_PART" };
        std::vector<AstEntity> astEntities;

        InitDataPart(std::vector<AstEntity> astEntities)
            : astEntities { std::move(astEntities) }
        {
        }
    };

    // Converts an InitDataPart object to json format.
    static void to_json(nlohmann::json& target, const InitDataPart& data)
    {
        target = nlohmann::json{
            { "type", data.type },
            { "astEntities", data.astEntities }
        };
    }

    // Gets an InitDataPart object from json.
    static void from_json(const nlohmann::json& source, InitDataPart& target)
    {
        source.at("type").get_to(target.type);
        source.at("astEntities").get_to(target.astEntities);
    }

    // Sent to Drill admin to notify that all information about classes was sent.
    class Initialized
    {
    public:
        std::string type { "INITIALIZED" };
        std::string msg { "" };
    };

    // Converts an Initialized object to json format.
    static void to_json(nlohmann::json& target, const Initialized& data)
    {
        target = nlohmann::json{
            { "type", data.type },
            { "msg", data.msg }
        };
    }

    // Gets an Initialized object from json.
    static void from_json(const nlohmann::json& source, Initialized& target)
    {
        source.at("type").get_to(target.type);
        source.at("msg").get_to(target.msg);
    }

    template <IsTreeProvider TreeProvider>
    class Connector
    {
    protected:
        const AgentConnectorDllLoader m_agentLibrary{};

        TreeProvider m_treeProvider;
        std::queue<ConnectorQueueItem> m_messages;
        std::mutex m_mutex;
        Event m_event { NULL, TRUE, FALSE, NULL };

        // a hack for static callback; it should be replaced by context parameter of callback
        inline static Connector* s_connector;
    protected:
        // is called by Kotlin native connector to transfer a message.
        // It pushes a message to the queue and signals the event.
        static void ReceiveMessage(const char* destination, const char* message)
        {
            if (s_connector)
            {
                std::wcout << "ReceiveMessage: "
                    << "destination: " << destination
                    << " message: " << message
                    << std::endl;
                if (std::string { "/agent/load" } == destination)
                {
                    std::vector<AstEntity> classes { s_connector->m_treeProvider() };
                    const std::string pluginName { "test2code" };

                    // send INIT
                    nlohmann::json initMessage = InitInfo { static_cast<uint32_t>(classes.size()) };
                    s_connector->SendPluginMessage(
                        pluginName,
                        initMessage.dump());

                    // send INIT_DATA_PART
                    nlohmann::json initDataPartMessage = InitDataPart(classes);
                    s_connector->SendPluginMessage(
                        pluginName,
                        initDataPartMessage.dump());

                    // send INITIALIZED
                    nlohmann::json initializedMessage = Initialized{};
                    s_connector->SendPluginMessage(
                        pluginName,
                        initializedMessage.dump());
                }
            }
        }

    public:
        Connector(TreeProvider treeProvider)
            : m_treeProvider { std::move(treeProvider) }
        {
            s_connector = this;
        }

        ~Connector()
        {
            ::SetEvent(m_event.Handle()); // to finish all waits
            ::WaitForSingleObject(m_event.Handle(), 0);
        }

        TreeProvider& TreeProvider() &
        {
            return m_treeProvider;
        }

        void InitializeAgent()
        {
            std::wcout << "Connector::InitializeAgent start." << std::endl;
            agent_connector_ExportedSymbols* ptr = m_agentLibrary.agent_connector_symbols();
            void (*fun)(const char*, const char*) = ReceiveMessage;
            void* function = (void*)(fun);
            m_agentLibrary.initialize_agent(
                "mysuperAgent",
                "localhost:8090",
                "1.0.0",
                "",
                "fail",
                function);
            std::wcout << "Connector::InitializeAgent end." << std::endl;
        }

        void SendAgentMessage(
            const std::string& messageType,
            const std::string& destination,
            const std::string& content)
        {
            std::cout
                << "Connector::SendAgentMessage: { MessageType = "
                << messageType
                << ", Destination = "
                << destination
                << ", Content = "
                << content
                << "}"
                << std::endl;

            m_agentLibrary.sendMessage(
                messageType.c_str(),
                destination.c_str(),
                content.c_str());
        }

        void SendPluginMessage(
            const std::string& pluginId,
            const std::string& content)
        {
            std::cout
                << "Connector::SendPluginMessage: { PluginId = "
                << pluginId
                << ", Content = "
                << content
                << "}"
                << std::endl;

            m_agentLibrary.sendPluginMessage(
                pluginId.c_str(),
                content.c_str());
        }

        std::optional<ConnectorQueueItem> GetNextMessage()
        {
            std::lock_guard<std::mutex> locker(m_mutex);
            if (!m_messages.empty())
            {
                const ConnectorQueueItem result { m_messages.front() };
                m_messages.pop();
                return result;
            }

            return std::nullopt;
        }

        void WaitForNextMessage(DWORD timeout = INFINITE)
        {
            DWORD waitResult = ::WaitForSingleObject(m_event.Handle(), timeout);
            switch (waitResult)
            {
            case WAIT_OBJECT_0:
            case WAIT_TIMEOUT:
                return;
            case WAIT_ABANDONED:
            case WAIT_FAILED:
            default:
                throw std::runtime_error("WaitForSingleObject failed.");
            }
        }
    };

    class TrivialTreeProvider
    {
    public:
        std::vector<AstEntity> operator()() const
        {
            return {};
        }
    };

    static_assert(IsConnector<Connector<TrivialTreeProvider>>);
}
